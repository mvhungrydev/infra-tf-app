version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - echo "Installing Terraform..."
      - export TF_VERSION=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d '"' -f 4 | sed 's/v//')
      - echo "Installing Terraform version $TF_VERSION"
      - wget https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
      - unzip terraform_${TF_VERSION}_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - terraform --version
      - echo "Installing AWS CLI..."
      - pip3 install --upgrade awscli

  pre_build:
    commands:
      - echo "Retrieving Venafi API key from Secrets Manager..."
      - export TF_VAR_venafi_api_key=$(aws secretsmanager get-secret-value --secret-id pki-tppl-api-key --query SecretString --output text)
      - echo "Venafi API key retrieved successfully"
      - echo "Setting up environment variables..."
      - export REAL_AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - export TF_VAR_aws_account_id=${REAL_AWS_ACCOUNT_ID}
      - export TF_VAR_aws_region=${AWS_DEFAULT_REGION:-"us-east-1"}
      - export TF_VAR_environment=${ENVIRONMENT:-"dev"}
      - export TF_VAR_project_name=${PROJECT_NAME:-"project_name"}
      - export TF_VAR_venafi_template_alias=${VENAFI_TEMPLATE_ALIAS:-"Default"}
      - export TF_VAR_venafi_cloud_url=${VENAFI_CLOUD_URL:-"https://api.venafi.cloud"}
      - export TF_VAR_certificate_count=${CERTIFICATE_COUNT:-"5"}
      - export TF_VAR_certificate_domain=${CERTIFICATE_DOMAIN:-"example.com"}
      - export TF_VAR_certificate_algorithm=${CERTIFICATE_ALGORITHM:-"RSA"}
      - export TF_VAR_certificate_rsa_bits=${CERTIFICATE_RSA_BITS:-"2048"}
      - export TF_VAR_certificate_valid_days=${CERTIFICATE_VALID_DAYS:-"90"}
      - echo "Environment variables configured"
      - echo "Venafi API Key length: ${#TF_VAR_venafi_api_key}"
      - echo "Terraform initialization..."
      - terraform init
      - terraform validate
      - terraform plan -out=tfplan

  build:
    commands:
      - echo "=== Build Phase ==="
      - terraform apply -input=false -auto-approve tfplan

  post_build:
    commands:
      - echo "=== Post-build Phase ==="

artifacts:
  files:
    - "**/*"
    - infrastructure_summary.json
  name: terraform-infrastructure-artifacts
